{"version":3,"sources":["webpack:///./index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","Object","assign","logger2","updatedUsers","table","makeTransaction","transaction","reject","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch"],"mappings":"wJAEMA,EAAQ,SAAAC,GACZ,OAAO,IAAIC,QAAQ,SAAAC,GACjBC,WAAW,WACTC,EAAOJ,IACNA,MAIDI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAEvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAIjB,IAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAIb,QAAQ,SAAAC,GAKjBA,EAJqBW,EAASE,IAAI,SAAAC,GAAI,OACpCA,EAAKN,OAASI,EAAdG,OAAAC,OAAA,GAA8BF,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,QAO7DG,EAAU,SAAAC,GAAY,OAAId,QAAQe,MAAMD,IAE9CR,EAAgBH,EAAO,SAASD,KAAKW,GACrCP,EAAgBH,EAAO,OAAOD,KAAKW,GAInC,IAIMG,EAAkB,SAAAC,GACtB,OAAO,IAAItB,QAAQ,SAACC,EAASsB,GAC3B,IAN+BC,EAAKC,EAM9B3B,GANyB0B,EAMS,IANJC,EAMS,IALxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAOlDtB,WAAW,WACUwB,KAAKE,SAAW,GAGjC3B,EAAQqB,EAAYO,GAAI/B,GAExByB,EAAOD,EAAYO,KAEpB/B,MAIDgC,EAAa,SAACD,EAAIzB,GACtBC,QAAQC,IAAR,eAA2BuB,EAA3B,iBAA8CzB,EAA9C,OAGI2B,EAAW,SAAAF,GACfxB,QAAQ2B,KAAR,gCAA6CH,EAA7C,8BAGFR,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/B1B,KAAKuB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/B1B,KAAKuB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,KAC/B1B,KAAKuB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/B1B,KAAKuB,GACLI,MAAMH","file":"main.ef9dbe9cd797534fdbec.js","sourcesContent":["// task 1\n\nconst delay = ms => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      logger(ms);\n    }, ms);\n  });\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n\n// task 2\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n  return new Promise(resolve => {\n    const updatedUsers = allUsers.map(user =>\n      user.name === userName ? { ...user, active: !user.active } : user,\n    );\n\n    resolve(updatedUsers);\n  });\n};\n\nconst logger2 = updatedUsers => console.table(updatedUsers);\n\ntoggleUserState(users, 'Mango').then(logger2);\ntoggleUserState(users, 'Lux').then(logger2);\n\n// task 3\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n  return new Promise((resolve, reject) => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve(transaction.id, delay);\n      } else {\n        reject(transaction.id);\n      }\n    }, delay);\n  });\n};\n\nconst logSuccess = (id, time) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);\n"],"sourceRoot":""}